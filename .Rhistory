ImageProcess("c:/Users/StanleyR/Documents/Gonad Analysis/mussel reproduction images july 2016/mussel mantle BCD july 2016/BCD5M1.tif")
x="c:/Users/StanleyR/Documents/Gonad Analysis/mussel reproduction images july 2016/mussel mantle BCD july 2016/BCD5M1.tif"
im=suppressWarnings(readImage(x)) # hold the original image for comparison. Since the Tiffs have some missing compression encoding the readImage function will spit out a warning, which are harmless.
if(is.numeric(crop)){
im <- im[,1:(dim(im)[2]-crop),]
}
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
img=im2
im2=gblur(im2,sigma=sigma)
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
display(im4,method = "raster")
display(im,method = "raster")
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
stack <- Channel1+Channel2+Channel3 # add channels togegther
im4@.Data[,,1]=stack
im4@.Data[,,2]=stack
im4@.Data[,,3]=stack
Coverage <- sum(!stack)/length(stack)*100
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
xt=list(im,im4) # create a list of the images for the processing comparision
xt=EBImage::combine(xt) # append images
display(xt,method="raster")
display(xt,method="raster",all=TRUE)
if(length(which(list.files(getwd())=="Processed figures"))==0){dir.create(paste0(getwd(),"/Processed figures"))} # if there isn't a 'Figures and Data' folder for output create one
ImType <- unlist(strsplit(x, ".", fixed = TRUE))[2]
if(ImType == "tif"){png(paste0("Processed figures/",gsub(".tif","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
if(ImType == "tif"){png(paste0("Processed figures/",gsub(".tif","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
paste0("Processed figures/",gsub(".tif","",x),"_processed.png")
setwd("c:/Users/StanleyR/Documents/Gonad Analysis/mussel reproduction images july 2016/mussel mantle BCD july 2016/")
if(ImType == "tif"){png(paste0("Processed figures/",gsub(".tif","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
paste0("Processed figures/",gsub(".tif","",x),"_processed.png")
x
x="BCD5M1.tif"
if(ImType == "tif"){png(paste0("Processed figures/",gsub(".tif","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
dev.off()
if(ImType == "tif"){png(paste0("Processed figures/",gsub(".tif","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
dev.off9)
dev.off()
if(ImType == "tif"){png(paste0("Processed figures/",gsub(".tif","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
if(ImType == "jpg"){png(paste0("Processed figures/",gsub(".jpg","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
dev.off()
source('~/Github/imExtractor/Code/ImageBatchProcess.R')
rootdir <- "c:/Users/StanleyR/Documents/Gonad Analysis/"
setwd(rootdir)
Folders <- dir(rootdir)
Folders
setwd(paste0(rootdir,i))
subfolders <- dir()
subfolders
j=subfolders[1]
j
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
subfoldername
month
year
folder=paste0(rootdir,i,"/",j)
folder
setwd(folder) # set working directory to folder
files <- (Sys.glob("*.tif")) # identify any
files
ImageMetaData <- lapply(files,FUN=ImageProcess,pix=pix,offset=offset,sigma=sigma,crop=crop)
getwd()
x="c:/Users/StanleyR/Documents/Gonad Analysis/mussel reproduction images july 2016/mussel mantle BCD july 2016/BCD425.tif"
ImageProcess(x)
x="BCD425.tif"
dev.off()
plot(1:10)
ImageProcess(x)
setwd("C:/Users/StanleyR/Documents/Gonad Analysis/mussel reproduction images july 2016/mussel mantle MID july 2016")
x="MID25M4.tif"
ImageProcess(x)
x="MID48M5.tif"
ImageProcess(x)
im=suppressWarnings(readImage(x)) # hold the original image for comparison. Since the Tiffs have some missing compression encoding the readImage function will spit out a warning, which are harmless.
if(is.numeric(crop)){
im <- im[,1:(dim(im)[2]-crop),]
}
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
img=im2
im2=gblur(im2,sigma=sigma)
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
Channel1=im3@.Data[,,1] # first grayscale channel
str(Channel1)
sum(Channel1)
sum(Channel1)/(1280*810)
1-sum(Channel1)/(1280*810)
display(Channel1,method="raster")
display(Channel2,method="raster")
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
display(Channel2,method="raster")
display(Channel1,method="raster")
display(Channel2,method="raster")
display(Channel3,method="raster")
dim(Channel1)
Channel1[1,1]
sum(Channel1)
sum(Channel1)/(1280*810)
unique(stack)
length(stack)
810*1280
stack[stack>0]=1
unique(as.vector(stack))
!unique(as.vector(stack))
Channel1[1,1]
sum(stack)
sum(stack)/length(stack)
display(stack[1:500,],method="raster")
display(stack,method="raster")
?display
display(stack[1:100,],method="raster")
display(stack[1:10,],method="raster")
display(stack[,1:10],method="raster")
display(stack[1:20,1:10],method="raster")
stack[1,1]
stack[1,8]
stack[1,9]
stack[1,10]
stack[1,7]
stack[1,6]
stack[6,1]
stack[7,1]
stack[14,1]
stack[13,1]
!c(1,0,0,1)
sum(c(1,1,0,1))
sum(!c(1,1,0,1))
sum(!stack)/length(stack)*100
stack <- Channel1+Channel2+Channel3 # add channels togegther
Coverage <- sum(!stack)/length(stack)*100
Coverage
sum(!stack)
stack[stack>0] <- 1
sum(!stack)
stack <- Channel1+Channel2+Channel3 # add channels togegther
stack[stack>0] <- 1 # ones and zeros
sum(!stack)
stack <- Channel1+Channel2+Channel3 # add channels togegther
sum(!stack)
stack <- Channel1+Channel2+Channel3 # add channels togegther
sum(!stack)/length(stack)*100
stack[stack>0] <- 1 # ones and zeros
sum(!stack)/length(stack)*100
stack <- Channel1+Channel2+Channel3 # add channels togegther
unique(as.vector(stack))
table(as.vector(stack))
sum(c(1,2,0,0))
sum(!c(1,2,0,0))
sum(!c(1,2,0,0)
sum(!c(1,2,0,0))
!c(1,2,0,0)
paste0(rootdir,i,"/",j)
tempout <- ImageBatchProcess(folder=paste0(rootdir,i,"/",j),
month=month,year=year,code=subfoldername)
dev.off()
plot(1:10)
rootdir <- "c:/Users/StanleyR/Documents/Gonad Analysis/"
setwd(rootdir)
source("c:/Users/StanleyR/Documents/Github/imExtractor/Code/ImageProcess2.R")
Folders <- dir(rootdir)
Output <- NULL
Folders
for(i in Folders){
setwd(paste0(rootdir,i))
subfolders <- dir()
for(j in subfolders){
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
tempout <- ImageBatchProcess(folder=paste0(rootdir,i,"/",j),
month=month,year=year,code=subfoldername)
Output <- rbind(Output,tempout)
} # end of j subfolders
} #end of i folders
library(EBImage)
source("c:/Users/StanleyR/Documents/Github/imExtractor/Code/ImageProcess2.R")
source("c:/Users/StanleyR/Documents/Github/imExtractor/Code/ImageBatchProcess.R")
rootdir <- "c:/Users/StanleyR/Documents/Gonad Analysis/"
setwd(rootdir)
Folders <- dir(rootdir)
Output <- NULL
for(i in Folders){
setwd(paste0(rootdir,i))
subfolders <- dir()
for(j in subfolders){
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
tempout <- ImageBatchProcess(folder=paste0(rootdir,i,"/",j),
month=month,year=year,code=subfoldername)
Output <- rbind(Output,tempout)
} # end of j subfolders
} #end of i folders
save.image("c:/Users/StanleyR/Documents/Gonad Analysis/Workspace.RData")
Load library
library(EBImage)
#Source functions
source("c:/Users/StanleyR/Documents/Github/imExtractor/Code/ImageProcess2.R")
source("c:/Users/StanleyR/Documents/Github/imExtractor/Code/ImageBatchProcess.R")
rootdir <- "c:/Users/StanleyR/Documents/Gonad Analysis/"
setwd(rootdir)
Folders <- dir(rootdir)
Folders
head(tempout)
Folders <- dir(rootdir)
Output <- NULL
for(i in Folders){
setwd(paste0(rootdir,i))
subfolders <- dir()
for(j in subfolders){
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
tempout <- ImageBatchProcess(folder=paste0(rootdir,i,"/",j),
month=month,year=year,code=subfoldername)
write.csv(tempout,paste0(rootdir,i,"/",j,"Output.csv"),row.names = FALSE)
Output <- rbind(Output,tempout)
} # end of j subfolders
} #end of i folders
j
dev.off()
#Load library
library(EBImage)
#Source functions
source("c:/Users/StanleyR/Documents/Github/imExtractor/Code/ImageProcess2.R")
source("c:/Users/StanleyR/Documents/Github/imExtractor/Code/ImageBatchProcess.R")
rootdir <- "c:/Users/StanleyR/Documents/Gonad Analysis/"
setwd(rootdir)
Folders <- dir(rootdir)
Foldres
Folders
Folders[grep("2016",Folders)]
Folders <- Folders[grep("2016",Folders)]
Folders
Output <- NULL
for(i in Folders){
setwd(paste0(rootdir,i))
subfolders <- dir()
for(j in subfolders){
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
tempout <- ImageBatchProcess(folder=paste0(rootdir,i,"/",j),
month=month,year=year,code=subfoldername)
write.csv(tempout,paste0(rootdir,i,"/",j,"Output.csv"),row.names = FALSE)
Output <- rbind(Output,tempout)
} # end of j subfolders
} #end of i folders
rootdir <- "c:/Users/StanleyR/Documents/Gonad Analysis/"
setwd(rootdir)
Folders
Output <- NULL
for(i in Folders){
setwd(paste0(rootdir,i))
subfolders <- dir()
for(j in subfolders){
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
tempout <- ImageBatchProcess(folder=paste0(rootdir,i,"/",j),
month=month,year=year,code=subfoldername)
write.csv(tempout,paste0(rootdir,i,"/",j,"Output.csv"),row.names = FALSE)
Output <- rbind(Output,tempout)
} # end of j subfolders
} #end of i folders
getwd()
setwd(rootdir)
i
paste0(rootdir,i)
Output <- NULL
for(i in Folders){
setwd(paste0(rootdir,i))
subfolders <- dir()
for(j in subfolders){
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
tempout <- ImageBatchProcess(folder=paste0(rootdir,i,"/",j),
month=month,year=year,code=subfoldername)
write.csv(tempout,paste0(rootdir,i,"/",j,"Output.csv"),row.names = FALSE)
Output <- rbind(Output,tempout)
} # end of j subfolders
} #end of i folders
paste0(rootdir,i,"/",j)
j
setwd(rootdir)
Output <- NULL
for(i in Folders){
setwd(paste0(rootdir,i))
subfolders <- dir()
for(j in subfolders){
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
tempout <- ImageBatchProcess(folder=paste0(rootdir,i,"/",j),
month=month,year=year,code=subfoldername)
write.csv(tempout,paste0(rootdir,i,"/",j,"Output.csv"),row.names = FALSE)
Output <- rbind(Output,tempout)
} # end of j subfolders
} #end of i folders
save.image("c:/Users/StanleyR/Documents/Gonad Analysis/ImageAnalysisOutput.RData")
head(Output)
dim(Output)
table(Output$Month)
Output[Output$Month == "september","Month"]
Output[Output$Month == "september","Month"] = "September"
table(Output$Month)
write.csv(Output,"c:/Users/StanleyR/Documents/Gonad Analysis/ImageOutput_MayJuneJuly_September.csv",row.names = F)
library(RCurl)
script <- getURL("https://raw.githubusercontent.com/rystanley/imExtractor/master/Code/ImageBatchProcess.R", ssl.verifypeer = FALSE)
eval(parse(text = script),envir=.GlobalEnv);rm(script)
script <- getURL("https://raw.githubusercontent.com/rystanley/imExtractor/master/Code/ImageProcess.R", ssl.verifypeer = FALSE)
eval(parse(text = script),envir=.GlobalEnv);rm(script)
?biocLite
source("https://bioconductor.org/biocLite.R")
?thresh
?gblur
setwd("c:/Users/StanleyR/Documents/GonandCopy/Example/")
ImageProces("BCS19F3_1.tif")
ImageProcess("BCS19F3_1.tif")
ImageProcess("BCS19F3_1.tif",pix=500)
ImageProcess("BCS19F3_1.tif",pix=100)
ImageProcess("BCS19F3_1.tif",pix=50)
ImageProcess("BCS19F3_1.tif")
ImageProcess("BCS19F3_2.tif",pix=50)
ImageProcess("BCS19F3_3.tif",pix=100,sigma=4)
ImageProcess("BCS19F3_3.tif",pix=100,sigma=6)
ImageProcess("BCS19F3_3.tif",pix=100,sigma=8)
ImageProcess("BCS19F3_3.tif",pix=200,sigma=8)
ImageProcess("BCS19F3_3.tif",pix=200,sigma=10)
ImageProcess("BCS19F3_3.tif",offset = 0.1)
ImageProcess("BCS19F3_3.tif",offset = 0.4)
ImageProcess("BCS19F3_3.tif",offset = 0.06)
ImageProcess("BCS19F3_3.tif",offset = 0.075)
ImageProcess("BCS19F3_3.tif",pix=200,sigma=10)
ImageProcess("BCS19F3_4.tif",offset = 0.075)
source('~/Github/imExtractor/Code/ImageBatchProcess.R')
script <- getURL("https://raw.githubusercontent.com/rystanley/imExtractor/master/Code/ImageBatchProcess.R", ssl.verifypeer = FALSE)
eval(parse(text = script),envir=.GlobalEnv);rm(script)
ImageBatchProcess(folder="Batch/",month=July,year=2016,code="BCS",pix = 100,offset = 0.075,sigma = 10,crop = 200)
BatchProcessExample <-ImageBatchProcess(folder="Batch/",month="July",year=2016,code="BCS",pix = 100,offset = 0.075,sigma = 10,crop = 200)
getwd()
script <- getURL("https://raw.githubusercontent.com/rystanley/imExtractor/master/Code/ImageBatchProcess.R", ssl.verifypeer = FALSE)
eval(parse(text = script),envir=.GlobalEnv);rm(script)
getwd()
setwd("c:/Users/StanleyR/Documents/GonandCopy/Example/")
BatchProcessExample <-ImageBatchProcess(folder="Batch/",month="July",year=2016,code="BCS",pix = 100,offset = 0.075,sigma = 10,crop = 200)
script <- getURL("https://raw.githubusercontent.com/rystanley/imExtractor/master/Code/ImageBatchProcess.R", ssl.verifypeer = FALSE)
eval(parse(text = script),envir=.GlobalEnv);rm(script)
BatchProcessExample <-ImageBatchProcess(folder="Batch/",month="July",year=2016,code="BCS",pix = 100,offset = 0.075,sigma = 10,crop = 200)
setwd("c:/Users/StanleyR/Documents/GonandCopy/Example/")
BatchProcessExample <-ImageBatchProcess(folder="Batch/",month="July",year=2016,code="BCS",pix = 100,offset = 0.075,sigma = 10,crop = 200)
script <- getURL("https://raw.githubusercontent.com/rystanley/imExtractor/master/Code/ImageBatchProcess.R", ssl.verifypeer = FALSE)
eval(parse(text = script),envir=.GlobalEnv);rm(script)
BatchProcessExample <-ImageBatchProcess(folder="Batch/",month="July",year=2016,code="BCS",pix = 100,offset = 0.075,sigma = 10,crop = 200)
setwd("c:/Users/StanleyR/Documents/GonandCopy/Example/")
BatchProcessExample <-ImageBatchProcess(folder="Batch/",month="July",year=2016,code="BCS",pix = 100,offset = 0.075,sigma = 10,crop = 200)
rm(ImageBatchProcess())
rm(ImageBatchProcess
)
script <- getURL("https://raw.githubusercontent.com/rystanley/imExtractor/master/Code/ImageBatchProcess.R", ssl.verifypeer = FALSE)
eval(parse(text = script),envir=.GlobalEnv);rm(script)
BatchProcessExample <-ImageBatchProcess(folder="Batch/",month="July",year=2016,code="BCS",pix = 100,offset = 0.075,sigma = 10,crop = 200)
setwd("c:/Users/StanleyR/Documents/GonandCopy/Example/")
BatchProcessExample <-ImageBatchProcess(folder="Batch/",month="July",year=2016,code="BCS",pix = 100,offset = 0.075,sigma = 10,crop = 200)
#Load libraries
library(EBImage)
library(RCurl)
#Load the function from github ----------------
script <- getURL("https://raw.githubusercontent.com/rystanley/imExtractor/master/Code/ImageBatchProcess.R", ssl.verifypeer = FALSE)
eval(parse(text = script),envir=.GlobalEnv);rm(script)
script <- getURL("https://raw.githubusercontent.com/rystanley/imExtractor/master/Code/ImageProcess.R", ssl.verifypeer = FALSE)
eval(parse(text = script),envir=.GlobalEnv);rm(script)
rootdir <- "c:/Users/StanleyR/Documents/Gonad Analysis/" # directory where the montly folders (e.g. July which holds BCD .. ..)
setwd(rootdir)
Folders <- "mussel reproduction images august 2016/"
Folders
#Set up a dummy variable for copying
Output <- NULL
for(i in Folders){
setwd(paste0(rootdir,i))
subfolders <- dir()
for(j in subfolders){
#Strip out meta information from the sub-folder (Month,Year and Acronym)
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
tempout <- ImageBatchProcess(folder=paste0(rootdir,i,"/",j),
month=month,year=year,code=subfoldername) #Process the images. Note if you would like to change any parameter do it here.
write.csv(tempout,paste0(rootdir,i,"/",j,"Output.csv"),row.names = FALSE) #print a subset output for each sub-folder
Output <- rbind(Output,tempout)
} # end of j subfolders
} #end of i folders
save.image(paste0(rootdir,"ImageAnalysisOutput_Aug.RData")) #
#Output[Output$Month == "september","Month"] = "September" #some of the months lower and upper case names
#Save final output csv
#write.csv(Output,paste0(rootdir,"ImageOutput_MayJuneJuly_September.csv"),row.names = F)
write.csv(Output,paste0(rootdir,"ImageOutput_August.csv"),row.names = F)
head(Output)
hist(Output$Coverage)
sum(c(44.79,44.92,44.49))/3
sd(c(44.79,44.92,44.49))
24997+2252.55
((24997+2252.55)+(23212+2252.55))/23
((24997+2252.55)+(23212+2252.55))/2
0.51+0.65+0.63
1.79/3
citation("vegan")
library(adegenet)
?chooseCN
library(marmap)
library(gdist)
library(gdistance)
?lc.cost
??lc.cost
library(gdistance)
library(maps)
library(mapdata)
library(maptools)
library(marmap)
library(PBSmapping)
library(ggplot2)
library(dplyr)
library(data.table)
library(gtable)
library(vegan)
?lc.dist
citation("marmap")
citation("genepopedit")
install.packages("EnmEval")
install.packages("ENMEval")
install.packages("Enmeval")
install.packages("ENMeval")
citation("ENMeval")
x="c:/Users/StanleyR/Desktop/BCS19F3_1.tif"
im=suppressWarnings(readImage(x)) # hold the original image for comparison. Since the Tiffs have some missing compression encoding the readImage function will spit out a warning, which are harmless.
if(is.numeric(crop)){
im <- im[,1:(dim(im)[2]-crop),]
}
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
img=im2
im2=gblur(im2,sigma=sigma)
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
#combine colour channels after the adaptive threshold
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
stack <- Channel1+Channel2+Channel3 # add channels togegther
im4@.Data[,,1]=stack
im4@.Data[,,2]=stack
im4@.Data[,,3]=stack
Coverage <- sum(!stack)/length(stack)*100
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
xt=list(im,im4) # create a list of the images for the processing comparision
xt=EBImage::combine(xt) # append images
getwd()
x
dirname(x)
setwd(dirname(x))
getwd()
if(length(which(list.files(getwd())=="Processed figures"))==0){dir.create(paste0(getwd(),"/Processed figures"))} # if there isn't a 'Figures and Data' folder for output create one
if(length(which(list.files(getwd())=="Processed figures"))==0){dir.create(paste0(getwd(),"/Processed figures"))} # if there isn't a 'Figures and Data' folder for output create one
gsub(getwd(),x)
gsub(getwd(),x=x)
x
gsub(pattern=getwd(),x="c:/Users/StanleyR/Desktop/BCS19F3_1.tif")
?gsub
gsub(getwd(),"",x)
gsub("/","",gsub(getwd(),"",x))
gsub(".tif","",gsub("/","",gsub(getwd(),"",x)))
ImType
ImType <- unlist(strsplit(x, ".", fixed = TRUE))[2]
ImType
paste0("Processed figures/",gsub(".tif","",gsub("/","",gsub(getwd(),"",x))),"_processed.png")
paste0(getwd(),"/Processed figures/",gsub(".tif","",gsub("/","",gsub(getwd(),"",x))),"_processed.png")
display(xt,all=T,method="raster") #display the images in raster format
source('~/Github/imExtractor/Code/ImageProcess_Singular.R')
setwd("c:/Users/StanleyR/Documents/Github/imExtractor/")
source('~/Github/imExtractor/Code/ImageProcess_Singular.R')
ImageProcess_single("c:/Users/ry")
ImageProcess_single("c:/Users/StanleyR/Desktop/BCS19F3_1.tif")
rm(ImageBatchProcess())
rm(ImageBatchProcess)
rm(ImageProcess())
rm(ImageProcess
)
rm(ImageProcess_single)
Weblinks <- c("https://raw.githubusercontent.com/rystanley/imExtractor/master/Code/ImageBatchProcess.R",
"https://raw.githubusercontent.com/rystanley/imExtractor/master/Code/ImageProcess.R",
"https://raw.githubusercontent.com/rystanley/imExtractor/master/Code/ImageProcess_Singular.R")
library(RCurl)
for (i in Weblinks){
script <- getURL(i, ssl.verifypeer = FALSE)
eval(parse(text = script),envir=.GlobalEnv)
rm(script)
}
library(EBImage)
