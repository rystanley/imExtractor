im2=gblur(im2,sigma=sigma)
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
#combine colour channels after the adaptive threshold
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
stack <- Channel1+Channel2+Channel3 # add channels togegther
#change to the summed stack
im4@.Data[,,1]=stack
im4@.Data[,,2]=stack
im4@.Data[,,3]=stack
#calculate coverage
Coverage <- sum(!stack)/length(stack)*100
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
#combined the images for the summary output
xt=list(im,im4) # create a list of the images for the processing comparision
xt=EBImage::combine(xt) # append images
#save the images in an output folder where the images are listed from. If not there create it.
if(length(which(list.files(getwd())=="Processed figures"))==0){dir.create(paste0(getwd(),"/Processed figures"))} # if there isn't a 'Figures and Data' folder for output create one
#save the image with processed
png(paste0("Processed figures/",gsub(".jpg","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
dev.off()
return(data.frame(Image=x,Coverage=Coverage,stringsAsFactors = F)) # return the processed data.
}
ImageProcess(x)
getwd()
if(length(which(list.files(getwd())=="Processed figures"))==0){dir.create(paste0(getwd(),"/Processed figures"))} # if there isn't a 'Figures and Data' folder for output create one
dir()
png(paste0("Processed figures/",gsub(".jpg","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
dev.off()
x
im=suppressWarnings(readImage(x)) # hold the original image for comparison. Since the Tiffs have some missing compression encoding the readImage function will spit out a warning, which are harmless.
#Crop the scale bar off
if(is.numeric(crop)){
im <- im[,1:(dim(im)[2]-crop),]
}
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
img=im2
im2=gblur(im2,sigma=sigma)
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
#combine colour channels after the adaptive threshold
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
stack <- Channel1+Channel2+Channel3 # add channels togegther
#change to the summed stack
im4@.Data[,,1]=stack
im4@.Data[,,2]=stack
im4@.Data[,,3]=stack
#calculate coverage
Coverage <- sum(!stack)/length(stack)*100
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
#combined the images for the summary output
xt=list(im,im4) # create a list of the images for the processing comparision
xt=EBImage::combine(xt) # append images
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
x[nchar(x)]
x
strsplit(x, ".", fixed = TRUE)[2]
str(x)
strsplit(x, ".", fixed = TRUE)
as.vector(strsplit(x, ".", fixed = TRUE))
ImType <- strsplit(x, ".", fixed = TRUE)
str(ImType)
ImType <- unlist(strsplit(x, ".", fixed = TRUE))
ImType
str(ImType)
ImType <- unlist(strsplit(x, ".", fixed = TRUE))[2]
ImType
ImType == ".tif"
ImType == ".jpg"
ImType
ImType == "tif"
ImageProcess=function(x,pix=200,offset=0.01,sigma=3,crop=150){
im=suppressWarnings(readImage(x)) # hold the original image for comparison. Since the Tiffs have some missing compression encoding the readImage function will spit out a warning, which are harmless.
#Crop the scale bar off
if(is.numeric(crop)){
im <- im[,1:(dim(im)[2]-crop),]
}
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
img=im2
im2=gblur(im2,sigma=sigma)
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
#combine colour channels after the adaptive threshold
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
stack <- Channel1+Channel2+Channel3 # add channels togegther
#change to the summed stack
im4@.Data[,,1]=stack
im4@.Data[,,2]=stack
im4@.Data[,,3]=stack
#calculate coverage
Coverage <- sum(!stack)/length(stack)*100
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
#combined the images for the summary output
xt=list(im,im4) # create a list of the images for the processing comparision
xt=EBImage::combine(xt) # append images
#save the images in an output folder where the images are listed from. If not there create it.
if(length(which(list.files(getwd())=="Processed figures"))==0){dir.create(paste0(getwd(),"/Processed figures"))} # if there isn't a 'Figures and Data' folder for output create one
#save the image with processed
ImType <- unlist(strsplit(x, ".", fixed = TRUE))[2]
if(ImType == "tif"){png(paste0("Processed figures/",gsub(".tif","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
if(ImType == "jpg"){png(paste0("Processed figures/",gsub(".jpg","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
dev.off()
return(data.frame(Image=x,Coverage=Coverage,stringsAsFactors = F)) # return the processed data.
}
dev.off()
ImageProcess(x)
ImageProcess("BCS21F1.tif",sigma=12)
ImageProcess("BCS21F1.tif",sigma=11)
ImageProcess("BCS21F1.tif",sigma=10)
ImageProcess("BCS21F1.tif",sigma=7)
install.packages("ddplyr")
install.packages("ddply")
dir("c:/Users/StanleyR/Documents/Postdoc/DFO/Analysis Help/Renald/mussel reproduction images may 2016/")
setwd("TESTFOLDER/")
files <- (Sys.glob("*.jpg"))
files
setwd("c:/Users/StanleyR/Documents/Gonad Analysis/")
setwd("c:/Users/StanleyR/Documents/Gonad Analysis/")
Folders <- dir()
Folders
rootdir <- "c:/Users/StanleyR/Documents/Gonad Analysis/"
setwd(rootdir)
Folders <- dir()
Output <- NULL
i=Folders[1]
i
folderdir <- setwd(rootdir,i)
folderdir <- setwd(paste0(rootdir,i))
setwd(paste0(rootdir,i))
getwd
getwd()
dir()
strsplit(dir()[1]," ")
subfoldername <- strsplit(dir()[1]," ")[3]
subfoldername
subfoldername <- strsplit(dir()[1]," "){[3]}
subfoldername <- strsplit(dir()[1]," ")[[3]]
subfoldername <- as.vector(strsplit(dir()[1]," "))[3]
subfoldername
strsplit(dir()[1]," ")
tt=strsplit(dir()[1]," ")
tt
str(tt)
subfoldername <- unlist(strsplit(dir()[1]," "))[3]
subfoldername
subfoldername <- unlist(strsplit(dir()[1]," "))[3]
month <- unlist(strsplit(dir()[1]," "))[4]
year <- unlist(strsplit(dir()[1]," "))[5]
year
monthy
month
subfoldername
getwd()
subfolders
subfolders <- dir()
subfolders
subfolders[1]
j=subfolders[1]
setwd(paste0(rootdir,i,"/",j))
getwd()
dir()
setwd(paste0(rootdir,i))
dir()
j
setwd(paste0(rootdir,i,"/",j))
subfoldername <- unlist(strsplit(dir()[1]," "))[3]
subfoldername
dir()
setwd(paste0(rootdir,i))
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
month
subfoldername
year <- unlist(strsplit(j[1]," "))[5]
year
paste0(rootdir,i,"/",j)
setwd(paste0(rootdir,i,"/",j))
files <- (Sys.glob("*.tif")) # identify any
files
ImageBatchProcess=function(dir,month=NULL,year=NULL,code=NULL, ...){
setwd(dir) # set working directory to dir
files <- (Sys.glob("*.tif")) # identify any
Start=Sys.time() # timing funciton
ImageMetaData <- lapply(files,FUN=ImageProcess)
Timelog <- Sys.time()-Start
Timelog <- round(as.numeric(Timelog,units="mins"),2)
output <- as.data.frame(do.call(rbind,ImageMetaData),stringsAsFactors=F)
#Add image metadata to the output dataframe
if(is.null(year)){year="Not specified"}
if(is.null(month)){month="Not specified"}
if(is.null(code)){code="Not specified"}
imagedata <- data.frame(Year=rep(year,nrow(output)),
Month=rep(month,nrow(output)),
Code=rep(code,nrow(output)),stringsAsFactors=F)
output=cbind(imagedata,output)
print(paste("Elapsed time to process",nrow(output),"Images ~",Timelog,"minutes",sep=" "))
return(output)
}
ImageMetaData <- lapply(files,FUN=ImageProcess,pix=pix,offset=offset,sigma=sigma,crop=crop)
ImageBatchProcess=function(dir,month=NULL,year=NULL,code=NULL,pix=200,offset=0.01,sigma=3,crop=150){
setwd(dir) # set working directory to dir
files <- (Sys.glob("*.tif")) # identify any
Start=Sys.time() # timing funciton
ImageMetaData <- lapply(files,FUN=ImageProcess,pix=pix,offset=offset,sigma=sigma,crop=crop)
Timelog <- Sys.time()-Start
Timelog <- round(as.numeric(Timelog,units="mins"),2)
output <- as.data.frame(do.call(rbind,ImageMetaData),stringsAsFactors=F)
#Add image metadata to the output dataframe
if(is.null(year)){year="Not specified"}
if(is.null(month)){month="Not specified"}
if(is.null(code)){code="Not specified"}
imagedata <- data.frame(Year=rep(year,nrow(output)),
Month=rep(month,nrow(output)),
Code=rep(code,nrow(output)),stringsAsFactors=F)
output=cbind(imagedata,output)
print(paste("Elapsed time to process",nrow(output),"Images ~",Timelog,"minutes",sep=" "))
return(output)
}
source("c:/Users/StanleyR/Documents/Github/imExtractor/Code/ImageProcess2.R")
rootdir <- "c:/Users/StanleyR/Documents/Gonad Analysis/"
setwd(rootdir)
Folders <- dir(rootdir)
Output <- NULL
for(i in Folders){
setwd(paste0(rootdir,i))
subfolders <- dir()
for(j in subfolders)
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
tempout <- ImageBatchProcess(dir=paste0(rootdir,i,"/",j),
month=month,year=year,code=subfoldername)
Output <- rbind(Output,tempout)
}
setwd(rootdir)
setwd(paste0(rootdir,i))
subfolders <- dir()
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
year
month
subfoldername
setwd(paste0(rootdir,i,"/",j))
dir()
dir()[2]
ImageProcess(dir(2))
paste0(rootdir,i,"/",j,"/","SAS11M1.tif")
ImageProcess(paste0(rootdir,i,"/",j,"/","SAS11M1.tif"))
dev.off()
ImageProcess(paste0(rootdir,i,"/",j,"/","SAS11M1.tif"))
subfolders
month
subfoldername
paste0(rootdir,i,"/",j)
dir(paste0(rootdir,i,"/",j))
i
Folders
subfolders
ImageProcess("c:/Users/StanleyR/Documents/Gonad Analysis/mussel reproduction images july 2016/mussel mantle BCD july 2016/BCD5M1.tif")
dev.off()
ImageProcess("c:/Users/StanleyR/Documents/Gonad Analysis/mussel reproduction images july 2016/mussel mantle BCD july 2016/BCD5M1.tif")
x="c:/Users/StanleyR/Documents/Gonad Analysis/mussel reproduction images july 2016/mussel mantle BCD july 2016/BCD5M1.tif"
im=suppressWarnings(readImage(x)) # hold the original image for comparison. Since the Tiffs have some missing compression encoding the readImage function will spit out a warning, which are harmless.
if(is.numeric(crop)){
im <- im[,1:(dim(im)[2]-crop),]
}
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
img=im2
im2=gblur(im2,sigma=sigma)
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
display(im4,method = "raster")
display(im,method = "raster")
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
stack <- Channel1+Channel2+Channel3 # add channels togegther
im4@.Data[,,1]=stack
im4@.Data[,,2]=stack
im4@.Data[,,3]=stack
Coverage <- sum(!stack)/length(stack)*100
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
xt=list(im,im4) # create a list of the images for the processing comparision
xt=EBImage::combine(xt) # append images
display(xt,method="raster")
display(xt,method="raster",all=TRUE)
if(length(which(list.files(getwd())=="Processed figures"))==0){dir.create(paste0(getwd(),"/Processed figures"))} # if there isn't a 'Figures and Data' folder for output create one
ImType <- unlist(strsplit(x, ".", fixed = TRUE))[2]
if(ImType == "tif"){png(paste0("Processed figures/",gsub(".tif","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
if(ImType == "tif"){png(paste0("Processed figures/",gsub(".tif","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
paste0("Processed figures/",gsub(".tif","",x),"_processed.png")
setwd("c:/Users/StanleyR/Documents/Gonad Analysis/mussel reproduction images july 2016/mussel mantle BCD july 2016/")
if(ImType == "tif"){png(paste0("Processed figures/",gsub(".tif","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
paste0("Processed figures/",gsub(".tif","",x),"_processed.png")
x
x="BCD5M1.tif"
if(ImType == "tif"){png(paste0("Processed figures/",gsub(".tif","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
dev.off()
if(ImType == "tif"){png(paste0("Processed figures/",gsub(".tif","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
dev.off9)
dev.off()
if(ImType == "tif"){png(paste0("Processed figures/",gsub(".tif","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
if(ImType == "jpg"){png(paste0("Processed figures/",gsub(".jpg","",x),"_processed.png"),width=dim(im)[1],height = dim(im)[2],unit="px")}
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
dev.off()
source('~/Github/imExtractor/Code/ImageBatchProcess.R')
rootdir <- "c:/Users/StanleyR/Documents/Gonad Analysis/"
setwd(rootdir)
Folders <- dir(rootdir)
Folders
setwd(paste0(rootdir,i))
subfolders <- dir()
subfolders
j=subfolders[1]
j
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
subfoldername
month
year
folder=paste0(rootdir,i,"/",j)
folder
setwd(folder) # set working directory to folder
files <- (Sys.glob("*.tif")) # identify any
files
ImageMetaData <- lapply(files,FUN=ImageProcess,pix=pix,offset=offset,sigma=sigma,crop=crop)
getwd()
x="c:/Users/StanleyR/Documents/Gonad Analysis/mussel reproduction images july 2016/mussel mantle BCD july 2016/BCD425.tif"
ImageProcess(x)
x="BCD425.tif"
dev.off()
plot(1:10)
ImageProcess(x)
setwd("C:/Users/StanleyR/Documents/Gonad Analysis/mussel reproduction images july 2016/mussel mantle MID july 2016")
x="MID25M4.tif"
ImageProcess(x)
x="MID48M5.tif"
ImageProcess(x)
im=suppressWarnings(readImage(x)) # hold the original image for comparison. Since the Tiffs have some missing compression encoding the readImage function will spit out a warning, which are harmless.
if(is.numeric(crop)){
im <- im[,1:(dim(im)[2]-crop),]
}
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
img=im2
im2=gblur(im2,sigma=sigma)
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
Channel1=im3@.Data[,,1] # first grayscale channel
str(Channel1)
sum(Channel1)
sum(Channel1)/(1280*810)
1-sum(Channel1)/(1280*810)
display(Channel1,method="raster")
display(Channel2,method="raster")
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
display(Channel2,method="raster")
display(Channel1,method="raster")
display(Channel2,method="raster")
display(Channel3,method="raster")
dim(Channel1)
Channel1[1,1]
sum(Channel1)
sum(Channel1)/(1280*810)
unique(stack)
length(stack)
810*1280
stack[stack>0]=1
unique(as.vector(stack))
!unique(as.vector(stack))
Channel1[1,1]
sum(stack)
sum(stack)/length(stack)
display(stack[1:500,],method="raster")
display(stack,method="raster")
?display
display(stack[1:100,],method="raster")
display(stack[1:10,],method="raster")
display(stack[,1:10],method="raster")
display(stack[1:20,1:10],method="raster")
stack[1,1]
stack[1,8]
stack[1,9]
stack[1,10]
stack[1,7]
stack[1,6]
stack[6,1]
stack[7,1]
stack[14,1]
stack[13,1]
!c(1,0,0,1)
sum(c(1,1,0,1))
sum(!c(1,1,0,1))
sum(!stack)/length(stack)*100
stack <- Channel1+Channel2+Channel3 # add channels togegther
Coverage <- sum(!stack)/length(stack)*100
Coverage
sum(!stack)
stack[stack>0] <- 1
sum(!stack)
stack <- Channel1+Channel2+Channel3 # add channels togegther
stack[stack>0] <- 1 # ones and zeros
sum(!stack)
stack <- Channel1+Channel2+Channel3 # add channels togegther
sum(!stack)
stack <- Channel1+Channel2+Channel3 # add channels togegther
sum(!stack)/length(stack)*100
stack[stack>0] <- 1 # ones and zeros
sum(!stack)/length(stack)*100
stack <- Channel1+Channel2+Channel3 # add channels togegther
unique(as.vector(stack))
table(as.vector(stack))
sum(c(1,2,0,0))
sum(!c(1,2,0,0))
sum(!c(1,2,0,0)
sum(!c(1,2,0,0))
!c(1,2,0,0)
paste0(rootdir,i,"/",j)
tempout <- ImageBatchProcess(folder=paste0(rootdir,i,"/",j),
month=month,year=year,code=subfoldername)
dev.off()
plot(1:10)
rootdir <- "c:/Users/StanleyR/Documents/Gonad Analysis/"
setwd(rootdir)
source("c:/Users/StanleyR/Documents/Github/imExtractor/Code/ImageProcess2.R")
Folders <- dir(rootdir)
Output <- NULL
Folders
for(i in Folders){
setwd(paste0(rootdir,i))
subfolders <- dir()
for(j in subfolders){
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
tempout <- ImageBatchProcess(folder=paste0(rootdir,i,"/",j),
month=month,year=year,code=subfoldername)
Output <- rbind(Output,tempout)
} # end of j subfolders
} #end of i folders
library(EBImage)
source("c:/Users/StanleyR/Documents/Github/imExtractor/Code/ImageProcess2.R")
source("c:/Users/StanleyR/Documents/Github/imExtractor/Code/ImageBatchProcess.R")
rootdir <- "c:/Users/StanleyR/Documents/Gonad Analysis/"
setwd(rootdir)
Folders <- dir(rootdir)
Output <- NULL
for(i in Folders){
setwd(paste0(rootdir,i))
subfolders <- dir()
for(j in subfolders){
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
tempout <- ImageBatchProcess(folder=paste0(rootdir,i,"/",j),
month=month,year=year,code=subfoldername)
Output <- rbind(Output,tempout)
} # end of j subfolders
} #end of i folders
save.image("c:/Users/StanleyR/Documents/Gonad Analysis/Workspace.RData")
Load library
library(EBImage)
#Source functions
source("c:/Users/StanleyR/Documents/Github/imExtractor/Code/ImageProcess2.R")
source("c:/Users/StanleyR/Documents/Github/imExtractor/Code/ImageBatchProcess.R")
rootdir <- "c:/Users/StanleyR/Documents/Gonad Analysis/"
setwd(rootdir)
Folders <- dir(rootdir)
Folders
head(tempout)
Folders <- dir(rootdir)
Output <- NULL
for(i in Folders){
setwd(paste0(rootdir,i))
subfolders <- dir()
for(j in subfolders){
subfoldername <- unlist(strsplit(j[1]," "))[3]
month <- unlist(strsplit(j[1]," "))[4]
year <- unlist(strsplit(j[1]," "))[5]
tempout <- ImageBatchProcess(folder=paste0(rootdir,i,"/",j),
month=month,year=year,code=subfoldername)
write.csv(tempout,paste0(rootdir,i,"/",j,"Output.csv"),row.names = FALSE)
Output <- rbind(Output,tempout)
} # end of j subfolders
} #end of i folders
j
dev.off()
