library(EBImage)
im=readImage("BCD1F1.jpg")
im2=im
colorMode(im2) = Grayscale
im3=thresh(im2, 50, 50, 0.05)
colorMode(im3) = Colour
?colourMode
?colorMode
colorMode(im3) = Color
xt=list(im,im3)
xt=list(im,im3)
xt=combine(xt)
display(xt,all=T)
display(xt,all=T,method="raster")
?thresh
x = readImage(system.file('images', 'nuclei.tif', package='EBImage'))
display(x,method="raster")
y = thresh(x, 10, 10, 0.05)
display(y,method="raster")
str(im3)
im3=thresh(im2, 50, 50, 0.05)
str(im3)
t1=im3@.Data[,,1]
t2=im3@.Data[,,2]
t3=im3@.Data[,,3]
sum(t1)
sum(t2)
sum(t3)
sum(t3)/sum(t1)
sum(t3)/sum(t2)
average(sum(im3@.Data))
mean(sum(im3@.Data))
mean(sum(t1,t2,t3))
mean(c(sum(t1),sum(t2),sum(t3)))
dim(t1)
length(as.vector(t2))
length(as.vector(t1))
1280*960
mean(c(sum(t1),sum(t2),sum(t3)))/length(as.vector(t1))
1-mean(c(sum(t1),sum(t2),sum(t3)))/length(as.vector(t1))
display(im3,method="raster",all=T)
display(im3,method="raster",)
display(im3,method="raster")
display(xt,all=T)
im4=im3
colorMode(im4) = Colour
colorMode(im4) = Color
xt=list(im,im4)
xt=combine(xt)
display(xt,all=T,method="raster")
png("TestEBI.png")
display(xt,all=T,method="raster")
dev.off()
Channel1=im3@.Data[,,1]
Channel2=im3@.Data[,,2]
Channel3=im3@.Data[,,3]
Coverage=1-mean(c(sum(Channel1),sum(Channel2),sum(Channel3)))/length(as.vector(Channel1))
Coverage
paste0(gsub(".jpg","",x),"_processed.png")
x="BCD1F1.jpg"
paste0(gsub(".jpg","",x),"_processed.png")
Coverage=1-mean(c(sum(Channel1),sum(Channel2),sum(Channel3)))/length(as.vector(Channel1))
title(xlab=Coverage, line=0)
display(xt,all=T,method="raster") #display the images in raster format
title(xlab=Coverage, line=0)
dim(xt)
dim(xt)[1]
text(x=dim(xt)[1]*0.1,y=dim(xt)[2]*0.1,label = Coverage,cex=3 )
Coverage=(1-mean(c(sum(Channel1),sum(Channel2),sum(Channel3)))/length(as.vector(Channel1)))*100
Coverage
CoverageLab <- paste0(round(Coverage,1),"% coverage. Image: ",gsub(".jpg","",x))
CoverageLab
CoverageLab <- paste0(round(Coverage,1),"% coverage.Image:",gsub(".jpg","",x))
CoverageLab
CoverageLab <- paste0(round(Coverage,1),"% coverage. " x))
CoverageLab <- paste0(round(Coverage,1),"% coverage. " x)
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
CoverageLab
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.1,y=dim(xt)[2]*0.1,label = CoverageLab)
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.1,y=dim(xt)[2]*0.1,label = CoverageLab,adj = c(0,1))
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1))
?text
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=4)
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=3)
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
data.frame(Image=x,Coverage=Coverage,stringsAsFactors = F)
ImageProcess=function(x,pix=50,offset=0.05){
im=readImage("BCD1F1.jpg") # hold the original image for comparison
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
xt=list(im,im4) # create a list of the images for the processing comparision
xt=combine(xt) # append images
#calculate coverage
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
Coverage=(1-mean(c(sum(Channel1),sum(Channel2),sum(Channel3)))/length(as.vector(Channel1)))*100
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
#save the image with processed
png(paste0(gsub(".jpg","",x),"_processed.png"))
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
dev.off()
return(data.frame(Image=x,Coverage=Coverage,stringsAsFactors = F)) # return the processed data.
}
ImageProcess("BCD1F1.jpg")
files <- (Sys.glob("*.jpg"))
tt <- lapply(files,FUN=ImageProcess)
mydf <- as.data.frame(do.call(rbind,rr),stringsAsFactors=F)
mydf <- as.data.frame(do.call(rbind,tt),stringsAsFactors=F)
mydf
ImageProcess=function(x,pix=50,offset=0.05){
im=readImage(x) # hold the original image for comparison
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
xt=list(im,im4) # create a list of the images for the processing comparision
xt=combine(xt) # append images
#calculate coverage
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
Coverage=(1-mean(c(sum(Channel1),sum(Channel2),sum(Channel3)))/length(as.vector(Channel1)))*100
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
#save the image with processed
png(paste0(gsub(".jpg","",x),"_processed.png"))
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
dev.off()
return(data.frame(Image=x,Coverage=Coverage,stringsAsFactors = F)) # return the processed data.
}
tt <- lapply(files,FUN=ImageProcess)
mydf <- as.data.frame(do.call(rbind,tt),stringsAsFactors=F)
mydf
x=BCD1F2.jpg
x="BCD1F2.jpg"
im=readImage(x) # hold the original image for comparison
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
pix=50
offset=0.05
im=readImage(x) # hold the original image for comparison
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
xt=list(im,im4) # create a list of the images for the processing comparision
xt=combine(xt) # append images
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
Coverage=(1-mean(c(sum(Channel1),sum(Channel2),sum(Channel3)))/length(as.vector(Channel1)))*100
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
sum(Channel1)
rm(Channel1)
rm(Channel2)
rm(Channel3)
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
c(sum(Channel1),sum(Channel2),sum(Channel3))
x="BCD1F1.jpg"
im=readImage(x) # hold the original image for comparison
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
xt=list(im,im4) # create a list of the images for the processing comparision
xt=combine(xt) # append images
c(sum(Channel1),sum(Channel2),sum(Channel3))
display(im,method="raster")
im="BCD1F2.jpg"
display(im,method="raster")
im
im=readImage(im)
display(im,method="raster")
x="BCD1F3.jpg"
im=readImage(x) # hold the original image for comparison
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
xt=list(im,im4) # create a list of the images for the processing comparision
xt=combine(xt) # append images
c(sum(Channel1),sum(Channel2),sum(Channel3))
display(im3,method="raster")
display(im,method="raster")
x
im=readImage(x) # hold the original image for comparison
im2=im # make a copy of the original image for processing
display(im,method="raster")
ImageProcess("c:/Users/StanleyR/Desktop/BCD9F1.jpg")
ImageProcess=function(x,pix=20,offset=0.05){
im=readImage(x) # hold the original image for comparison
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
xt=list(im,im4) # create a list of the images for the processing comparision
xt=combine(xt) # append images
#calculate coverage
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
Coverage=(1-mean(c(sum(Channel1),sum(Channel2),sum(Channel3)))/length(as.vector(Channel1)))*100
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
#save the image with processed
png(paste0(gsub(".jpg","",x),"_processed.png"))
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
dev.off()
return(data.frame(Image=x,Coverage=Coverage,stringsAsFactors = F)) # return the processed data.
}
tt <- lapply(files,FUN=ImageProcess)
mydf <- as.data.frame(do.call(rbind,tt),stringsAsFactors=F)
mydf
ImageProcess=function(x,pix=5,offset=0.05){
im=readImage(x) # hold the original image for comparison
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
xt=list(im,im4) # create a list of the images for the processing comparision
xt=combine(xt) # append images
#calculate coverage
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
Coverage=(1-mean(c(sum(Channel1),sum(Channel2),sum(Channel3)))/length(as.vector(Channel1)))*100
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
#save the image with processed
png(paste0(gsub(".jpg","",x),"_processed.png"))
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
dev.off()
return(data.frame(Image=x,Coverage=Coverage,stringsAsFactors = F)) # return the processed data.
}
tt <- lapply(files,FUN=ImageProcess)
mydf <- as.data.frame(do.call(rbind,tt),stringsAsFactors=F)
mydf
ImageProcess("c:/Users/StanleyR/Desktop/BCD9F1.jpg")
ImageProcess=function(x,pix=1,offset=0.05){
im=readImage(x) # hold the original image for comparison
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
xt=list(im,im4) # create a list of the images for the processing comparision
xt=combine(xt) # append images
#calculate coverage
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
Coverage=(1-mean(c(sum(Channel1),sum(Channel2),sum(Channel3)))/length(as.vector(Channel1)))*100
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
#save the image with processed
png(paste0(gsub(".jpg","",x),"_processed.png"))
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
dev.off()
return(data.frame(Image=x,Coverage=Coverage,stringsAsFactors = F)) # return the processed data.
}
ImageProcess("c:/Users/StanleyR/Desktop/BCD9F1.jpg")
ImageProcess("c:/Users/StanleyR/Desktop/BCD9F1.jpg",pix=2)
ImageProcess("c:/Users/StanleyR/Desktop/BCD9F1.jpg",pix=10)
ImageProcess("c:/Users/StanleyR/Desktop/BCD9F1.jpg",pix=15)
ImageProcess("c:/Users/StanleyR/Desktop/BCD9F1.jpg",pix=40)
ImageProcess("c:/Users/StanleyR/Desktop/BCD9F1.jpg",pix=100)
ImageProcess("c:/Users/StanleyR/Desktop/BCD9F1.jpg",pix=50)
ImageProcess("c:/Users/StanleyR/Desktop/Test.png",pix=50)
ImageProcess("c:/Users/StanleyR/Desktop/Test.png",pix=10)
ImageProcess("c:/Users/StanleyR/Desktop/Test.png",pix=2)
ImageProcess("c:/Users/StanleyR/Desktop/Test.png",pix=45)
ImageProcess("c:/Users/StanleyR/Desktop/Test.png",pix=45)
ImageProcess("c:/Users/StanleyR/Desktop/Test.png",pix=4)
ImageProcess("c:/Users/StanleyR/Desktop/Test.png",pix=3)
im=readImage("c:/Users/StanleyR/Desktop/Test.png")
dim(im)
ImageProcess=function(x,pix=50,offset=0.05){
im=readImage(x) # hold the original image for comparison
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
xt=list(im,im4) # create a list of the images for the processing comparision
xt=combine(xt) # append images
#calculate coverage
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
Coverage=(1-mean(c(sum(Channel1),sum(Channel2),sum(Channel3)))/length(as.vector(Channel1)))*100
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
#save the image with processed
png(paste0(gsub(".jpg","",x),"_processed.png"))
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
dev.off()
return(data.frame(Image=x,Coverage=Coverage,stringsAsFactors = F)) # return the processed data.
}
tt <- lapply(files,FUN=ImageProcess)
mydf <- as.data.frame(do.call(rbind,tt),stringsAsFactors=F)
range(Channel1)
plot(Channel1,Channel2)
plot(1:10)
plot(as.vector(Channel1),as.vector(Channel2))
head(as.vector(Channel1))
head(as.vector(Channel2))
tt=cbind(as.vector(Channel1),as.vector(Channel2))
head(tt)
sum(tt[,1]==tt[,2])
display(im2,method="raster")
?save.image
writeJPEG(im2,"test.jpg")
jpeg::writeJPEG(im2,"test.jpg")
library(imager)
im=load.image("test.jpg")
im2=load.image("test.jpg")
imCoverage <- im2%>%as.data.frame()%>%
summarise(precentcoverage=(1-(sum(value)/length(value)))*100)%>%
as.numeric()%>%round(.,1)
imCoverage
jpeg::writeJPEG(im3,"test2.jpg")
im2=load.image("test2.jpg")
plot(im2)
plot(threshold(im2))
plot(threshold(grayscale(im2)))
im2=threshold(grayscale(im2))
plot(im2)
im2%>%as.data.frame()%>%
summarise(precentcoverage=(1-(sum(value)/length(value)))*100)%>%
as.numeric()%>%round(.,1)
x
ImageProcess(x)
x
ImageProcess(x)
files <- (Sys.glob("*.jpg"))
files
ImageProcess=function(x,pix=50,offset=0.05){
im=readImage(x) # hold the original image for comparison
im2=im # make a copy of the original image for processing
colorMode(im2) = Grayscale # convert to grayscale
im3=thresh(im2, pix, pix, offset) # adaptive thresholding based on a pix and offset parametes. Note threshold is applied to each grayscale channel
im4=im3 # create a copy of the thresholded image which can be assigned the color mode for image appending
colorMode(im4) = Color # assign the color mode to match original 'im'
xt=list(im,im4) # create a list of the images for the processing comparision
xt=combine(xt) # append images
#calculate coverage
Channel1=im3@.Data[,,1] # first grayscale channel
Channel2=im3@.Data[,,2] # second grayscale channel
Channel3=im3@.Data[,,3] # third grayscale channel
Coverage=(1-mean(c(sum(Channel1),sum(Channel2),sum(Channel3)))/length(as.vector(Channel1)))*100
CoverageLab <- paste0(round(Coverage,1),"% coverage. ", x)
#save the image with processed
png(paste0(gsub(".jpg","",x),"_processed.png"))
display(xt,all=T,method="raster") #display the images in raster format
text(x=dim(xt)[1]*0.05,y=dim(xt)[2]*0.05,label = CoverageLab,adj = c(0,1),font=2)
dev.off()
return(data.frame(Image=x,Coverage=Coverage,stringsAsFactors = F)) # return the processed data.
}
tt <- lapply(files,FUN=ImageProcess)
mydf <- as.data.frame(do.call(rbind,tt),stringsAsFactors=F)
mydf
ImageProcess("SAS2F5.jpg",pix=30)
ImageProcess("SAS2F5.jpg",pix=60)
ImageProcess("SAS2F5.jpg",pix=70)
ImageProcess("SAS2F5.jpg",pix=90)
ImageProcess("SAS2F5.jpg",pix=600)
ImageProcess("SAS2F5.jpg",pix=10)
ImageProcess("SAS2F5.jpg",pix=100)
files <- (Sys.glob("*.jpg"))
tt <- lapply(files,FUN=ImageProcess)
mydf <- as.data.frame(do.call(rbind,tt),stringsAsFactors=F)
mydf
ImageProcess("SAS3M3.jpg",pix=10)
ImageProcess("SAS3M3.jpg",pix=20)
ImageProcess("SAS3M3.jpg",pix=30)
ImageProcess("SAS3M3.jpg",pix=40)
ImageProcess("SAS3M3.jpg",pix=60)
ImageProcess("SAS3M3.jpg",pix=70)
ImageProcess("SAS3M3.jpg",pix=90)
ImageProcess("SAS3M3.jpg",pix=100)
ImageProcess("SAS3M3.jpg",pix=150)
ImageProcess("SAS3M3.jpg",pix=150,offset=0.1)
ImageProcess("SAS3M3.jpg",pix=150)
ImageProcess("BCD1F1.jpg",pix=150)
